name: reusable-build-and-test

on:
  workflow_call:
    inputs:
      java-version:
        required: true
        type: string
      distribution:
        required: true
        type: string
      maven-options:
        required: true
        type: string
      spring_profile:
        type: string

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: use node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'cap-bookshop/package-lock.json'

      - name: install and run OData v2 + v4 mockserver
        run: |
          cd cap-bookshop
          npm i
          npm start &

      - run: cd .. # back to java space...

      - name: set up jdk ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.distribution }}
          cache: maven

      #      - name: test env var availability
      #        env:
      #          destinations: ${{ secrets.DESTINATIONS }}
      #        run: echo $destinations
      - name: create application-${{ inputs.spring_profile }}.properties
        run: |
          echo "current directory: $(pwd)"
          echo "content of current directory: $(ls -al)"
          
          touch ./src/test/resources/application-${{ inputs.spring_profile }}.properties
          {
            echo "camunda.client.mode=saas"

            echo "camunda.client.auth.client-id=${{ secrets.C86_CLIENT_ID }}"
            echo "camunda.client.auth.client-secret=${{ secrets.C86_CLIENT_SECRET }}"
            echo "camunda.client.cluster-id=${{ secrets.C86_CLUSTER_ID }}"
            echo "camunda.client.region=${{ secrets.C86_REGION }}"

            echo "camunda.client.operate.enabled=false"
            echo "camunda.connector.polling.enabled=false"
            echo "spring.main.allow-bean-definition-overriding=true"
            echo "logging.level.io.camunda.connector.sap=DEBUG"
            echo "logging.level.com.sap.cloud.sdk=DEBUG"
          } > ./src/test/resources/application-${{ inputs.spring_profile }}.properties

          echo "content of application-${{ inputs.spring_profile }}.properties:"
          cat ./src/test/resources/application-${{ inputs.spring_profile }}.properties
          
          echo "content of src/test/resources: $(ls -al ./src/test/resources)"

      - name: unit tests
        env:
          destinations: ${{ secrets.DESTINATIONS }}
        run: |
          mvn ${{ inputs.maven-options }} test

      - name: integration tests (against S/4)
        env:
          destinations: ${{ secrets.DESTINATIONS }}
        run: |
          SPRING_PROFILES_ACTIVE=integration-s4 mvn ${{ inputs.maven-options }} test

      - name: e2e tests (against c8)
        env:
          destinations: ${{ secrets.DESTINATIONS }}
        run: |
          rm ./src/test/resources/application.properties 
          # so we're sourcing the right c8 saas props for the e2e test
          echo "content of src/test/resources: $(ls -al ./src/test/resources)"
          
          SPRING_PROFILES_ACTIVE=integration-c86-saas mvn ${{ inputs.maven-options }} test
